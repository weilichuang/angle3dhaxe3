package org.angle3d.math.random;

/**
	Random number generator base class.
**/
class Rng
{
	/**
		The sequence of numbers is dependent on an initial value, called the seed.
		This means that, if the seed isn't altered, the sequence of random numbers that is generated by the program will be exactly the same on each run of the program.
	**/
	public var seed(get_seed, set_seed):Int;
	
	private var mSeed:Int;
	
	public function new()
	{
		mSeed = 0;
	}
	
	
	function get_seed():Int
	{
		return mSeed;
	}
	
	function set_seed(value:Int):Int
	{
		return mSeed = value;
	}
	
	/**
		Returns an integral number (see specific implementation for details).
		
		_The number is returned as a double to prevent overflow since some targets don't support unsigned 32-bit integers._
	**/
	public function rand():Float
	{
		return throw "override for implementation";
	}
	
	/**
		Returns a real number in the range [0,1).
	**/
	public function randFloat():Float
	{
		return throw "override for implementation";
	}
	
	/**
		Returns an integral number in the interval [`min`,`max`].
	**/
	inline public function randRange(min:Int, max:Int):Int
	{
		var l = min - .4999;
		var h = max + .4999;
		return Math.round(l + (h - l) * randFloat());
	}
	
	/**
		Returns a real number in the interval [`min`,`max`).
	**/
	inline public function randFloatRange(min:Float, max:Float):Float
	{
		return min + (max - min) * randFloat();
	}
	
	/**
		Returns an integral number in the interval [-`range`,`range`].
	**/
	inline public function randSymmetric(range:Int):Float
	{
		return randRange(-range, range);
	}
	
	/**
		Returns a real number in the interval [-`range`,`range`).
	**/
	inline public function randFloatSymmetric(range:Float):Float
	{
		return randFloatRange(-range, range);
	}
}