#ifdef(baseline || baselineExtended || standard || standardConstrained){
	float function ceil(float value){
		float t_local_frc = fract(value);
		float t_local_int = sub(value,t_local_frc);
		float t_local_2 = lessThan(0.0,t_local_frc);
		return add(t_local_int,t_local_2);
	}

	float function sign(float source1){
		float t_local0 = notEqual(source1,0.0);
		float t_local1 = lessThan(source1,0.0);
		t_local1 = negate(t_local1);
		float t_local2 = lessThan(0.0,source1);
		float t_local3 = add(t_local1,t_local2);
		return mul(t_local0,t_local3);
	}
}

vec2 function Vec2(float x){
	vec2 t_vec2;
	t_vec2.xy = x;
	return t_vec2;
}

vec2 function Vec2(float x, float y){
	vec2 t_vec2;
	t_vec2.x = x;
	t_vec2.y = y;
	return t_vec2;
}

vec3 function Vec3(float x){
	vec3 t_vec3;
	t_vec3.xyz = x;
	return t_vec3;
}

vec3 function Vec3(float x, float y, float z){
	vec3 t_vec3;
	t_vec3.x = x;
	t_vec3.y = y;
	t_vec3.z = z;
	return t_vec3;
}

vec3 function Vec3(vec2 vec, float z){
	vec3 t_vec3;
	t_vec3.xy = vec;
	t_vec3.z = z;
	return t_vec3;
}

vec3 function Vec3(float x,vec2 vec){
	vec3 t_vec3;
	t_vec3.x = x;
	t_vec3.yz = vec;
	return t_vec3;
}

vec4 function Vec4(float x){
	vec4 t_vec4;
	t_vec4.xyzw = x;
	return t_vec4;
}

vec4 function Vec4(float x, float y, float z, float w){
	vec4 t_vec4;
	t_vec4.x = x;
	t_vec4.y = y;
	t_vec4.z = z;
	t_vec4.w = w;
	return t_vec4;
}

vec4 function Vec4(vec2 vec, float z, float w){
	vec4 t_vec4;
	t_vec4.xy = vec;
	t_vec4.z = z;
	t_vec4.w = w;
	return t_vec4;
}

vec4 function Vec4(float x, float y,vec2 vec){
	vec4 t_vec4;
	t_vec4.x = x;
	t_vec4.y = y;
	t_vec4.zw = vec;
	return t_vec4;
}

vec4 function Vec4(vec3 vec, float w){
	vec4 t_vec4;
	t_vec4.xyz = vec;
	t_vec4.w = w;
	return t_vec4;
}

vec4 function Vec4(float x,vec3 vec){
	vec4 t_vec4;
	t_vec4.x = x;
	t_vec4.yzw = vec;
	return t_vec4;
}

vec4 function Vec4(vec2 v1,vec2 v2){
	vec4 t_vec4;
	t_vec4.xy = v1;
	t_vec4.zw = v2;
	return t_vec4;
}

float function tan(float value){
	float t_sin = sin(value);
	float t_cos = cos(value);
	return divide(t_sin,t_cos);
}

float function clamp(float value,float minVal,float maxVal){
	float t_local = max(value,minVal);
	return min(t_local,maxVal);
}

float function floor(float value){
	float t_local = fract(value);
	return sub(value,t_local);
}

float function round(float value){
	float t_local_frc = fract(value);
	float t_local_int = sub(value,t_local_frc);
	float t_local_2 = greaterEqual(t_local_frc,0.5);
	return add(t_local_int,t_local_2);
}

float function distance(vec3 source1,vec3 source2){
	float t_local = dot3(source1,source2);
	return sqrt(t_local);
}

float function distance(vec4 source1,vec4 source2){
	float t_local = dot4(source1,source2);
	return sqrt(t_local);
}

float function length(vec3 source1){
	float t_local = dot3(source1,source1);
	return sqrt(t_local);
}

float function length(vec4 source1){
	float t_local = dot4(source1,source1);
	return sqrt(t_local);
}

float function length(vec2 source1){
	float t_local = source1.x * source1.x + source1.y * source1.y;
	return sqrt(t_local);
}

float function mix(float source1,float source2,float percent){
	float t_percent1 = 1 - percent;
	float t_local1 = mul(source1,t_percent1);
	float t_local2 = mul(source2,percent);
	return add(t_local1,t_local2);
}

vec4 function lerp(vec4 source1,vec4 source2,float percent)
{
	float t_percent1 = percent;
	t_percent1 = sub(1.0,t_percent1);
	vec4 t_local1 = mul(source1,t_percent1);
	vec4 t_local2 = mul(source2,percent);
	return add(t_local1,t_local2);
}

vec3 function lerp(vec3 source1,vec3 source2,float percent)
{
	float t_percent1 = percent;
	t_percent1 = sub(1.0,t_percent1);
	vec3 t_local1 = mul(source1,t_percent1);
	vec3 t_local2 = mul(source2,percent);
	return add(t_local1,t_local2);
}

vec3 function reflect(vec3 incident,vec3 normal){
	float t_dot = dot3(normal,incident);
	t_dot = mul(t_dot,2.0);
	vec3 t_vec = mul(normal,t_dot);
	return sub(incident,t_vec);
}

vec3 function refract(vec3 incident,vec3 normal,vec3 etaRatio){
	float t_dotNI = dot3(normal,incident);
	float t_dotNI2 = mul(t_dotNI,t_dotNI);
	float t_eta2dot2 = mul(etaRatio.y,t_dotNI2);
	float t_k = add(etaRatio.z,t_eta2dot2);
	float t_sqrtk = sqrt(t_k);
	float t_tmp = mul(etaRatio.x,t_dotNI);
	t_tmp = add(t_tmp,t_sqrtk);
	vec3 t_vec0 = mul(incident,etaRatio.x);
	vec3 t_vec1 = mul(t_tmp,normal);
	return sub(t_vec0,t_vec1);
}

float function maxDot(vec3 normal,vec3 lightdir,float maxValue){
	float t_local = dot3(normal,lightdir);
	return max(t_local,maxValue);
}

/*
* Computes light direction 
* @param worldPos 
* @param lightType
* @param lightPosition
* @param lightDir
* @param lightVec
* lightType should be 0.0,1.0,2.0, repectively for Directional, point and spot lights.
* Outputs the light direction and the light half vector. 
*/
void function lightComputeDir(vec3 worldPos, float lightType, vec4 lightPosition, vec4 lightDir, vec3 lightVec)
{
	float t_PosLight = saturate(lightType);
	vec3 t_TempVec = lightPosition.xyz * sign(t_PosLight - 0.5) - (worldPos * t_PosLight);
	lightVec = t_TempVec;  
	
	float t_Dist = length(t_TempVec);
	#ifdef(SRGB)
	{
		lightDir.w = (1.0 - position.w * t_Dist) / (1.0 + lightPosition.w * t_Dist * t_Dist);
		lightDir.w = clamp(lightDir.w, 1.0 - t_PosLight, 1.0);
	} 
	#else 
	{
		lightDir.w = saturate(1.0 - lightPosition.w * t_Dist * t_PosLight);
	}
	lightDir.xyz = t_TempVec / t_Dist;
}

/*
* @param lightDirection 前三位是方向，最后一位是InnerAngleCos和OuterAngleCos结合起来的数字，需要分解开
* Computes the spot falloff for a spotlight
*/
float function computeSpotFalloff(vec4 lightDirection, vec3 lightVector){
	vec3 t_L = normalize(lightVector);
	vec3 t_Spotdir = normalize(lightDirection.xyz);
	float t_CurAngleCos = dot3(-t_L, t_Spotdir);
	
	float t_OuterAngleCos = fract(lightDirection.w);
	float t_InnerAngleCos = lightDirection.w - t_OuterAngleCos;
	t_InnerAngleCos = t_InnerAngleCos * 0.001;
	
	float t_InnerMinusOuter = t_InnerAngleCos - t_OuterAngleCos;
	
	float t_Value = (t_CurAngleCos - t_OuterAngleCos) / t_InnerMinusOuter;
	return clamp(t_Value, step(lightDirection.w, 0.001), 1.0);
}

/*
* Computes diffuse factor (Lambert)
*/
float function lightComputeDiffuse(vec3 norm, vec3 lightdir){
	return max(0.0, dot3(norm, lightdir));
}

/*
* Computes specular factor   (blinn phong) 
*/
float function lightComputeSpecular(vec3 norm, vec3 viewdir, vec3 lightdir, float shiny)
{
	vec3 H = normalize(viewdir + lightdir);
	float HdotN = max(0.0, dot3(H, norm));
	return pow(HdotN, shiny);
}

/*
* Computes diffuse and specular factors and pack them in a vec2 (x=diffuse, y=specular)
*/
void function computeLighting(vec3 norm, vec3 viewDir, vec3 lightDir, float attenuation, float shininess,vec2 result)
{
	//float diffuseFactor = lightComputeDiffuse(norm,lightDir);
	//float specularFactor = lightComputeSpecular(norm, viewDir, lightDir, shininess); 
	
	//Computes diffuse factor (Lambert)
	float diffuseFactor = max(0.0, dot3(norm, lightDir));
	
	//Computes specular factor   (blinn phong) 
	vec3 H = normalize(viewDir + lightDir);
	float HdotN = max(0.0, dot3(H, norm));
	float specularFactor = pow(HdotN, shininess);
   
	//小于等于1时忽略specular
	float t_num1 = 1.0;
	specularFactor = step(t_num1, shininess) * specularFactor;
   
	result.x = diffuseFactor * attenuation;
	result.y = specularFactor * diffuseFactor * attenuation;
}

void function skinning_Compute(vec4 boneIndices,vec4 boneWeights,vec4 boneMatrixs,vec4 position){
	mat34 t_skinTransform;
	
	vec4 t_boneIndexVec = mul(boneIndices,3);

	t_skinTransform[0]  = boneMatrixs[t_boneIndexVec.x] * boneWeights.x;
	t_skinTransform[0]  = t_skinTransform[0] + boneMatrixs[t_boneIndexVec.y] * boneWeights.y;
	t_skinTransform[0]  = t_skinTransform[0] + boneMatrixs[t_boneIndexVec.z] * boneWeights.z;
	t_skinTransform[0]  = t_skinTransform[0] + boneMatrixs[t_boneIndexVec.w] * boneWeights.w;

	t_skinTransform[1]  = boneMatrixs[t_boneIndexVec.x + 1] * boneWeights.x;
	t_skinTransform[1]  = t_skinTransform[1] + boneMatrixs[t_boneIndexVec.y + 1] * boneWeights.y;
	t_skinTransform[1]  = t_skinTransform[1] + boneMatrixs[t_boneIndexVec.z + 1] * boneWeights.z;
	t_skinTransform[1]  = t_skinTransform[1] + boneMatrixs[t_boneIndexVec.w + 1] * boneWeights.w;

	t_skinTransform[2]  = boneMatrixs[t_boneIndexVec.x + 2] * boneWeights.x;
	t_skinTransform[2]  = t_skinTransform[2] + boneMatrixs[t_boneIndexVec.y + 2] * boneWeights.y;
	t_skinTransform[2]  = t_skinTransform[2] + boneMatrixs[t_boneIndexVec.z + 2] * boneWeights.z;
	t_skinTransform[2]  = t_skinTransform[2] + boneMatrixs[t_boneIndexVec.w + 2] * boneWeights.w;
	
	position.xyz = m34(position,t_skinTransform);
}
 
void function skinning_Compute(vec4 boneIndices,vec4 boneWeights,vec4 boneMatrixs,vec4 position, vec3 normal){
	mat34 t_skinTransform;
	
	vec4 t_boneIndexVec = mul(boneIndices,3);

	t_skinTransform[0]  = boneMatrixs[t_boneIndexVec.x] * boneWeights.x;
	t_skinTransform[0]  = t_skinTransform[0] + boneMatrixs[t_boneIndexVec.y] * boneWeights.y;
	t_skinTransform[0]  = t_skinTransform[0] + boneMatrixs[t_boneIndexVec.z] * boneWeights.z;
	t_skinTransform[0]  = t_skinTransform[0] + boneMatrixs[t_boneIndexVec.w] * boneWeights.w;

	t_skinTransform[1]  = boneMatrixs[t_boneIndexVec.x + 1] * boneWeights.x;
	t_skinTransform[1]  = t_skinTransform[1] + boneMatrixs[t_boneIndexVec.y + 1] * boneWeights.y;
	t_skinTransform[1]  = t_skinTransform[1] + boneMatrixs[t_boneIndexVec.z + 1] * boneWeights.z;
	t_skinTransform[1]  = t_skinTransform[1] + boneMatrixs[t_boneIndexVec.w + 1] * boneWeights.w;

	t_skinTransform[2]  = boneMatrixs[t_boneIndexVec.x + 2] * boneWeights.x;
	t_skinTransform[2]  = t_skinTransform[2] + boneMatrixs[t_boneIndexVec.y + 2] * boneWeights.y;
	t_skinTransform[2]  = t_skinTransform[2] + boneMatrixs[t_boneIndexVec.z + 2] * boneWeights.z;
	t_skinTransform[2]  = t_skinTransform[2] + boneMatrixs[t_boneIndexVec.w + 2] * boneWeights.w;
	
	position.xyz = m34(position,t_skinTransform);
	normal.xyz = m33(normal.xyz,t_skinTransform);
}
 
void function skinning_Compute(vec4 boneIndices,vec4 boneWeights,vec4 boneMatrixs,vec4 position, vec3 normal, vec3 tangent){
	mat34 t_skinTransform;
	
	vec4 t_boneIndexVec = mul(boneIndices,3);

	t_skinTransform[0]  = boneMatrixs[t_boneIndexVec.x] * boneWeights.x;
	t_skinTransform[0]  = t_skinTransform[0] + boneMatrixs[t_boneIndexVec.y] * boneWeights.y;
	t_skinTransform[0]  = t_skinTransform[0] + boneMatrixs[t_boneIndexVec.z] * boneWeights.z;
	t_skinTransform[0]  = t_skinTransform[0] + boneMatrixs[t_boneIndexVec.w] * boneWeights.w;

	t_skinTransform[1]  = boneMatrixs[t_boneIndexVec.x + 1] * boneWeights.x;
	t_skinTransform[1]  = t_skinTransform[1] + boneMatrixs[t_boneIndexVec.y + 1] * boneWeights.y;
	t_skinTransform[1]  = t_skinTransform[1] + boneMatrixs[t_boneIndexVec.z + 1] * boneWeights.z;
	t_skinTransform[1]  = t_skinTransform[1] + boneMatrixs[t_boneIndexVec.w + 1] * boneWeights.w;

	t_skinTransform[2]  = boneMatrixs[t_boneIndexVec.x + 2] * boneWeights.x;
	t_skinTransform[2]  = t_skinTransform[2] + boneMatrixs[t_boneIndexVec.y + 2] * boneWeights.y;
	t_skinTransform[2]  = t_skinTransform[2] + boneMatrixs[t_boneIndexVec.z + 2] * boneWeights.z;
	t_skinTransform[2]  = t_skinTransform[2] + boneMatrixs[t_boneIndexVec.w + 2] * boneWeights.w;
	
	position.xyz = m34(position,t_skinTransform);
	normal.xyz = m33(normal.xyz,t_skinTransform);
	tangent.xyz = m33(tangent.xyz,t_skinTransform);
}