/*
Copyright (c) 2012-2014 Michael Baczynski, http://www.polygonal.de

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
package de.polygonal.core.math.random;

import de.polygonal.core.math.Mathematics.M;

/**
	Random number generator base class.
**/
class Rng
{
	var mSeed:Int;
	
	public function new()
	{
		mSeed = 0;
	}
	
	/**
		The sequence of numbers is dependent on an initial value, called the seed.
		This means that, if the seed isn't altered, the sequence of random numbers that is generated by the program will be exactly the same on each run of the program.
	**/
	public var seed(get_seed, set_seed):Int;
	function get_seed():Int
	{
		return mSeed;
	}
	function set_seed(value:Int):Int
	{
		return mSeed = value;
	}
	
	/**
		Returns an integral number (see specific implementation for details).
		
		_The number is returned as a double to prevent overflow since some targets don't support unsigned 32-bit integers._
	**/
	public function rand():Float
	{
		return throw "override for implementation";
	}
	
	/**
		Returns a real number in the range [0,1).
	**/
	public function randFloat():Float
	{
		return throw "override for implementation";
	}
	
	/**
		Returns an integral number in the interval [`min`,`max`].
	**/
	inline public function randRange(min:Int, max:Int):Int
	{
		var l = min - .4999;
		var h = max + .4999;
		return M.round(l + (h - l) * randFloat());
	}
	
	/**
		Returns a real number in the interval [`min`,`max`).
	**/
	inline public function randFloatRange(min:Float, max:Float):Float
	{
		return min + (max - min) * randFloat();
	}
	
	/**
		Returns an integral number in the interval [-`range`,`range`].
	**/
	inline public function randSymmetric(range:Int):Float
	{
		return randRange(-range, range);
	}
	
	/**
		Returns a real number in the interval [-`range`,`range`).
	**/
	inline public function randFloatSymmetric(range:Float):Float
	{
		return randFloatRange(-range, range);
	}
}